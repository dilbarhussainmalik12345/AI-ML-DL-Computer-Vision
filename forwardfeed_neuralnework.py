# -*- coding: utf-8 -*-
"""forwardfeed_NeuralNework.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-_B6KQ-TLT5m0MfBr02STtRYzHhxLylp
"""

#MINST
#Dataloader, Transformation
#Multilayer Neural net, Activation Function
#Loss Optimizer
#Training Loop
#Model Activication
#GPU Support
import torch
import torch.nn as nn
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt

#device config
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

#Hyper Parameters
input_size = 784
hidden_size = 100
num_classes = 10
num_epochs = 2
batch_size = 100
learning_rate = 0.001


#MINST
train_dataset = torchvision.datasets.MNIST(root= './data', train = True,
                                           transform = transforms.ToTensor(), download = True)

test_dataset = torchvision.datasets.MNIST(root= './data', train = False,
                                           transform = transforms.ToTensor())


train_loader = torch.utils.data.DataLoader(dataset = train_dataset, batch_size = batch_size,
                                           shuffle = True)

test_loader = torch.utils.data.DataLoader(dataset = test_dataset, batch_size = batch_size,
                                           shuffle = False)

examples = iter(train_loader)
samples, labels = examples.next()
print(samples.shape, labels.shape)

for i in range(6):
  plt.subplot(2,3, i+1)
  plt.imshow(samples[i][0], cmap = 'grap')
plt.show()

